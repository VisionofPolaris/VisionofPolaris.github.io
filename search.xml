<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSD（二）IoU实现</title>
      <link href="/archives/f2621c10.html"/>
      <url>/archives/f2621c10.html</url>
      
        <content type="html"><![CDATA[<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li>输入参数：</li></ul><p>box_a：图片中的GT框信息，维度为[N, 4]，其中N代表GT框的个数，4代表坐标；<br>box_b：图片中的先验框信息，维度为[M, 4]，其中M代表先验框的个数，4代表坐标。</p><ul><li>功能：</li></ul><p>计算交并比：</p><p>$$ IoU= \frac {box _ a \cap box _ b} {box _ a \cup box _ b} $$</p><h1 id="交集面积"><a href="#交集面积" class="headerlink" title="交集面积"></a>交集面积</h1><p><strong>step 1</strong> 求每一个GT框与所有锚框之间左上角横纵坐标的最大值和右下角横纵坐标的最小值</p><p>以左上角为例，分别求两个框左上角横纵坐标的最大值，如图1所示。</p><p><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h4ilxwu1c4j30r00kc0uw.jpg" alt="图1"></p><p>得到的结果应为维度为**[N, M, 2]**的张量，代表的含义是第n个真实框与第m个先验框重叠部分左上角的2个坐标值。代码实现如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LT <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>box_a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box_b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>box_a[:, None, :2]会在axis=1处增加一个为1的维度。torch.max()输入为两个张量时会满足张量运算的<strong>广播机制</strong>[1]，运算过程如下，假设box_a[:, None, :2]为A，box_b[:, :2]为B。</p><ul><li>A沿着y轴复制M份，对应M个先验框（[N, 1, 2]-&gt;[N, M, 2]）；</li><li>B沿着x轴复制N份，对应N个GT框（[M, 2]-&gt;[N, M, 2]）；</li><li>对应位置比较大小。</li></ul><p><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h4ilz38by5j31450wd0z4.jpg" alt="图2"></p><p><strong>step 2</strong>求重叠部分面积</p><ul><li>当两个矩形框有重叠部分时：右下角坐标-左上角坐标&gt;=0</li><li>当两个矩形框没有重叠时：右下角坐标-左上角坐标&lt;0</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">inters <span class="token operator">=</span> <span class="token punctuation">(</span>inter_lowerrights <span class="token operator">-</span> inter_upperlefts<span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>inter_areas <span class="token operator">=</span> inters<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> inters<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># (N, M)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>torch.clamp()可以将输入张量夹紧到[min, max][2]。</p><h1 id="并集面积"><a href="#并集面积" class="headerlink" title="并集面积"></a>并集面积</h1><p><strong>step 3</strong> 计算box_a和box_b的面积</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">box_area <span class="token operator">=</span> <span class="token keyword">lambda</span> boxes<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>areas1 <span class="token operator">=</span> box_area<span class="token punctuation">(</span>box_a<span class="token punctuation">)</span> <span class="token comment"># (N,)</span>areas2 <span class="token operator">=</span> box_area<span class="token punctuation">(</span>box_b<span class="token punctuation">)</span> <span class="token comment"># (M,)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>step 4</strong> 计算并集面积<br>并集面积 = 先验框面积 + GT面积 - 交集面积，输出应为[N, M]。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">union_areas <span class="token operator">=</span> areas1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">+</span> areas2 <span class="token operator">-</span> inter_areas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">iou</span><span class="token punctuation">(</span>box_a<span class="token punctuation">,</span> box_b<span class="token punctuation">)</span><span class="token punctuation">:</span>        LT <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>        box_a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># (N, 1, 2)</span>        box_b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment"># (M, 2)</span>    <span class="token punctuation">)</span>    RB <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>        box_a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># (N, 1, 2)</span>        box_b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># (M, 2)</span>    <span class="token punctuation">)</span>        inter <span class="token operator">=</span> <span class="token punctuation">(</span>RB <span class="token operator">-</span> LT<span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#(N, M, 2)</span>    inter_areas <span class="token operator">=</span> inter<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> inter<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        box_area <span class="token operator">=</span> <span class="token keyword">lambda</span> boxes<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    areas1 <span class="token operator">=</span> box_area<span class="token punctuation">(</span>box_a<span class="token punctuation">)</span> <span class="token comment"># (N,)</span>    areas2 <span class="token operator">=</span> box_area<span class="token punctuation">(</span>box_b<span class="token punctuation">)</span> <span class="token comment"># (M,)</span>        union_areas <span class="token operator">=</span> areas1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">+</span> areas2 <span class="token operator">-</span> inter_areas <span class="token comment"># (N, M)</span>        <span class="token keyword">return</span> inter_areas<span class="token operator">/</span>union_areas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://blog.csdn.net/u012151283/article/details/54972593">https://blog.csdn.net/u012151283/article/details/54972593</a></p><p>[2] <a href="https://blog.csdn.net/u013230189/article/details/82627375">https://blog.csdn.net/u013230189/article/details/82627375</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSD（一）VOC数据加载</title>
      <link href="/archives/30160142.html"/>
      <url>/archives/30160142.html</url>
      
        <content type="html"><![CDATA[<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="voc数据集结构"><a href="#voc数据集结构" class="headerlink" title="voc数据集结构"></a>voc数据集结构</h2><pre class="line-numbers language-none"><code class="language-none">└─VOCdevkit    └─VOC2007        ├─Annotations        ├─ImageSets        │  └─Main        └─JPEGImages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h3><p>Annotations文件夹中存放的是xml格式的文件，每一个xml文件都对应于JPEGImages文件夹中的一张图片，包含标注框、标签等信息，每个<object>标签里代表一个物体信息：<p></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span><span class="token punctuation">&gt;</span></span> # 图片中存在的物体    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>car<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  # 类别    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pose</span><span class="token punctuation">&gt;</span></span>Unspecified<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pose</span><span class="token punctuation">&gt;</span></span>  #物体的姿态    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>truncated</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>truncated</span><span class="token punctuation">&gt;</span></span>  #物体是否被部分遮挡（&gt;15%）    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>difficult</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>difficult</span><span class="token punctuation">&gt;</span></span>  #是否为难以辨识的物体    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bndbox</span><span class="token punctuation">&gt;</span></span>  #物体的bbox        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmin</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymin</span><span class="token punctuation">&gt;</span></span>156<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmax</span><span class="token punctuation">&gt;</span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmax</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymax</span><span class="token punctuation">&gt;</span></span>259<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymax</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bndbox</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>VOC的矩形标注坐标是以1为基准的(1-based)，而我们在处理图像坐标都是0起始的(0-based)。因此在处理的时候一般将得到的坐标-1。</p></blockquote><h3 id="ImageSets"><a href="#ImageSets" class="headerlink" title="ImageSets"></a>ImageSets</h3><p>主要有Main文件夹，其中存放的主要又有四个文本文件test.txt、train.txt、trainval.txt、val.txt，其中分别存放的是测试集图片的文件名、训练集图片的文件名、训练验证集图片的文件名、验证集图片的文件名。</p><h3 id="JPEGImages"><a href="#JPEGImages" class="headerlink" title="JPEGImages"></a>JPEGImages</h3><p>存放所有的图片。</p><h2 id="xml-etree-ElementTree模块"><a href="#xml-etree-ElementTree模块" class="headerlink" title="xml.etree.ElementTree模块"></a>xml.etree.ElementTree模块</h2><p>该模块可以用于创建和解析XML数据。例如下面的XML文档：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotation</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>folder</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>123<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>VOC2007<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>folder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filename</span><span class="token punctuation">&gt;</span></span>009963.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filename</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">&gt;</span></span>The VOC2007 Database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotation</span><span class="token punctuation">&gt;</span></span>PASCAL VOC2007<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotation</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">&gt;</span></span>flickr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flickrid</span><span class="token punctuation">&gt;</span></span>65163277<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flickrid</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>owner</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flickrid</span><span class="token punctuation">&gt;</span></span>Jez_P<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flickrid</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Jeremy Pick<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>owner</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>width</span><span class="token punctuation">&gt;</span></span>374<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>width</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>height</span><span class="token punctuation">&gt;</span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>height</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>depth</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>depth</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>size</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>segmented</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>segmented</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>car<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pose</span><span class="token punctuation">&gt;</span></span>Frontal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pose</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>truncated</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>truncated</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>difficult</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>difficult</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bndbox</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmin</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymin</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmax</span><span class="token punctuation">&gt;</span></span>374<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmax</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymax</span><span class="token punctuation">&gt;</span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymax</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bndbox</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotation</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ET<span class="token comment"># 1. 导入数据</span>tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'example.xml'</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 2. 访问子级结点标签和属性</span><span class="token comment"># 循环访问</span><span class="token keyword">for</span> child <span class="token keyword">in</span> root<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> child<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''folder {'name': '123'}filename {}source {}owner {}size {}segmented {}object {}'''</span><span class="token comment"># 索引访问</span><span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''filename'''</span><span class="token comment"># 3. 查找感兴趣的元素</span><span class="token comment"># .iter()</span><span class="token keyword">for</span> child <span class="token keyword">in</span> root<span class="token punctuation">.</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Jeremy Pickcar'''</span><span class="token comment"># .find()</span><span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''car'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pytorch数据加载"><a href="#Pytorch数据加载" class="headerlink" title="Pytorch数据加载"></a>Pytorch数据加载</h2><p>PyTorch中使用Dataset和DataLoader两个工具类完成数据的加载，前者用于构造数据集、后者用于取一批次的数据。加载数据的整体结构：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token comment"># 自定义数据加载类，继承Dataset</span><span class="token keyword">class</span> <span class="token class-name">CustomDataSet</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># 根据索引取出一条数据</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># 返回数据条数</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>dataset <span class="token operator">=</span> CustomDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用DataLoader类制作数据加载器</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>    dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 读取数据时使用的线程数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="读取数据代码"><a href="#读取数据代码" class="headerlink" title="读取数据代码"></a>读取数据代码</h1><p>主要由两个类构成：</p><ul><li><p>第一个类读取xml文件里的标注框坐标信息，进行归一化后将该图片所有的标注框整合成形如[[xmin, ymin, xmax, ymax, label], [xmin, ymin, xmax, ymax, label], …]的列表返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">VOC_CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token comment"># always index 0</span>    <span class="token string">'aeroplane'</span><span class="token punctuation">,</span> <span class="token string">'bicycle'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'boat'</span><span class="token punctuation">,</span>    <span class="token string">'bottle'</span><span class="token punctuation">,</span> <span class="token string">'bus'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'chair'</span><span class="token punctuation">,</span>    <span class="token string">'cow'</span><span class="token punctuation">,</span> <span class="token string">'diningtable'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'horse'</span><span class="token punctuation">,</span>    <span class="token string">'motorbike'</span><span class="token punctuation">,</span> <span class="token string">'person'</span><span class="token punctuation">,</span> <span class="token string">'pottedplant'</span><span class="token punctuation">,</span>    <span class="token string">'sheep'</span><span class="token punctuation">,</span> <span class="token string">'sofa'</span><span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'tvmonitor'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">VOCAnnotationTransform</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    class_to_ind: 构造一个由类名-标签映射的字典    keep_difficult: 是否保留难检测的物体    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> class_to_ind<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> keep_difficult<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>class_to_ind <span class="token operator">=</span> class_to_ind <span class="token keyword">or</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>            <span class="token builtin">zip</span><span class="token punctuation">(</span>VOC_CLASSES<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>VOC_CLASSES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>keep_difficult <span class="token operator">=</span> keep_difficult    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 遍历所有的object标签</span>        <span class="token keyword">for</span> obj <span class="token keyword">in</span> target<span class="token punctuation">.</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 是/否跳过难以检测的物体</span>            difficult <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'difficult'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>keep_difficult <span class="token keyword">and</span> difficult<span class="token punctuation">:</span>                <span class="token keyword">continue</span>                            name <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取类别名称</span>            bbox <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'bndbox'</span><span class="token punctuation">)</span> <span class="token comment"># 获取bbox的坐标位置</span>                        <span class="token comment"># 循环获取四个位置的坐标值</span>            pts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xmin'</span><span class="token punctuation">,</span> <span class="token string">'ymin'</span><span class="token punctuation">,</span> <span class="token string">'xmax'</span><span class="token punctuation">,</span> <span class="token string">'ymax'</span><span class="token punctuation">]</span>            bndbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> pt <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>pts<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur_pt <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>bbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>                cur_pt <span class="token operator">=</span> cur_pt <span class="token operator">/</span> width <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> cur_pt <span class="token operator">/</span> height <span class="token comment"># 归一化</span>                bndbox<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_pt<span class="token punctuation">)</span>            label_idx <span class="token operator">=</span> self<span class="token punctuation">.</span>class_to_ind<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token comment"># 将类别名称转换为类别标签</span>            bndbox<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label_idx<span class="token punctuation">)</span>            res <span class="token operator">+=</span> <span class="token punctuation">[</span>bndbox<span class="token punctuation">]</span>  <span class="token comment"># [xmin, ymin, xmax, ymax, label_ind]</span>        <span class="token keyword">return</span> res  <span class="token comment"># [[xmin, ymin, xmax, ymax, label_ind], ... ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二个类构建VOC数据集的dataloader：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VOCDetection</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token comment"># VOCdevkit文件夹的路径</span>                 transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 image_set <span class="token operator">=</span> <span class="token string">'trainval'</span><span class="token punctuation">,</span>                 target_transform<span class="token operator">=</span>VOCAnnotationTransform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 dataset_name<span class="token operator">=</span><span class="token string">'VOC2007'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root        self<span class="token punctuation">.</span>image_set <span class="token operator">=</span> image_set        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform        self<span class="token punctuation">.</span>target_transform <span class="token operator">=</span> target_transform        self<span class="token punctuation">.</span>name <span class="token operator">=</span> dataset_name        self<span class="token punctuation">.</span>_annopath <span class="token operator">=</span> osp<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%s'</span><span class="token punctuation">,</span> <span class="token string">'Annotations'</span><span class="token punctuation">,</span> <span class="token string">'%s.xml'</span><span class="token punctuation">)</span> <span class="token comment"># 标注框信息路径</span>        self<span class="token punctuation">.</span>_imgpath <span class="token operator">=</span> osp<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%s'</span><span class="token punctuation">,</span> <span class="token string">'JPEGImages'</span><span class="token punctuation">,</span> <span class="token string">'%s.jpg'</span><span class="token punctuation">)</span> <span class="token comment"># 图片路径</span>        <span class="token comment"># 将训练的图片编号记录于ids列表中</span>        self<span class="token punctuation">.</span>ids <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>osp<span class="token punctuation">.</span>join<span class="token punctuation">(</span>rootpath<span class="token punctuation">,</span> <span class="token string">'ImageSets'</span><span class="token punctuation">,</span> <span class="token string">'Main'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>image_set <span class="token operator">+</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        im<span class="token punctuation">,</span> gt<span class="token punctuation">,</span> h<span class="token punctuation">,</span> w <span class="token operator">=</span> self<span class="token punctuation">.</span>pull_item<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token keyword">return</span> im<span class="token punctuation">,</span> gt    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ids<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pull_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        img_id <span class="token operator">=</span> self<span class="token punctuation">.</span>ids<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token comment"># 获取第i张图片的编号（图片名）</span>        target <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_annopath <span class="token operator">%</span> img_id<span class="token punctuation">)</span><span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读取对应的XML文件</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_imgpath <span class="token operator">%</span> img_id<span class="token punctuation">)</span> <span class="token comment"># 读取对应的图片</span>        height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> channels <span class="token operator">=</span> img<span class="token punctuation">.</span>shape <span class="token comment"># 获取图片的长、宽及通道数</span>        <span class="token comment"># 标注由XML文件标签转换为列表</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>target_transform <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            target <span class="token operator">=</span> self<span class="token punctuation">.</span>target_transform<span class="token punctuation">(</span>target<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>        <span class="token comment"># 图片（含标签）进行数据增强</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            target <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>target<span class="token punctuation">)</span>            img<span class="token punctuation">,</span> boxes<span class="token punctuation">,</span> labels <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>img<span class="token punctuation">,</span> target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># 图片转换为rgb格式</span>            img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            target <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> height<span class="token punctuation">,</span> width <span class="token comment"># img转换为Tensor</span>        <span class="token comment"># return torch.from_numpy(img), target, height, width</span>    <span class="token keyword">def</span> <span class="token function">pull_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        img_id <span class="token operator">=</span> self<span class="token punctuation">.</span>ids<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_imgpath <span class="token operator">%</span> img_id<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_COLOR<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pull_anno</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        img_id <span class="token operator">=</span> self<span class="token punctuation">.</span>ids<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        anno <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_annopath <span class="token operator">%</span> img_id<span class="token punctuation">)</span><span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>        gt <span class="token operator">=</span> self<span class="token punctuation">.</span>target_transform<span class="token punctuation">(</span>anno<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> img_id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gt    <span class="token keyword">def</span> <span class="token function">pull_tensor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pull_image<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于target = np.hstack((boxes, np.expand_dims(labels, axis=1)))：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span>a1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>a2 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''a1 = array([[1, 2],            [4, 5]])a2 = array([3, 6])a3 = array([[3],            [6]])'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>[1] <a href="https://github.com/amdegroot/ssd.pytorch/">github源码</a></p></blockquote><blockquote><p>[2] <a href="http://giantpandacv.com/academic/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%B7%9F%E8%B8%AA/%E7%BB%8F%E5%85%B8%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/SSD/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E4%B9%8BSSD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%AD%96%E7%95%A5/">目标检测算法之SSD的数据增强策略</a></p></blockquote><blockquote><p>[3] <a href="https://wenku.baidu.com/view/7759449efe0a79563c1ec5da50e2524de518d091.html">pytorch数据加载</a></p></blockquote></object></p>]]></content>
      
      
      <categories>
          
          <category> 代码实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRGAN</title>
      <link href="/archives/d5460cb9.html"/>
      <url>/archives/d5460cb9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ledig C, Theis L, Huszár F, et al. Photo-realistic single image super-resolution using a generative adversarial network[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2017: 4681-4690.</p></blockquote><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>通常有监督的超分辨率算法的优化目标是最小化均方差（MSE），同时，也最大化了图像评价指标峰值信噪比（PSNR）。但是，这种评价指标不利于捕捉感知层面的差异（比如图像的纹理细节等），容易使得到的结果过于平滑，缺少高频信息，导致图片看上去不自然。</p><p><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h414j0twcvj30d50amjwk.jpg" alt="image.png" title="左图具有更高的PSNR，但很明显右图的纹理细节更清晰"></p><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h414m8dagbj30q108dadu.jpg" alt="image.png" title="生成器结构"></p><ol><li>作用：由低分辨率图像生成高分辨率图像</li><li>结构：<ol><li>一个卷积层和PReLU函数</li><li>B个残差块</li><li>上采样结构</li></ol></li><li>图片中k代表卷积核尺寸、n代表卷积输出的通道数、s代表步长、箭头表示残差结构、Elementwise Sun是残差中相加的操作</li></ol><h2 id="判别器"><a href="#判别器" class="headerlink" title="判别器"></a>判别器</h2><p><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h414msuzb4j30q1065aen.jpg" alt="image.png" title="判别器结构"></p><ol><li>作用：判别图片是真实的HR图片还是生成的HR图片</li><li>输出为判断结果，位于0-1之间，越接近1代表判断为真、越接近0代表判断为假</li></ol><h1 id="感知损失函数"><a href="#感知损失函数" class="headerlink" title="感知损失函数"></a>感知损失函数</h1><p>损失函数由判别器损失和生成器损失组成，判别器损失和原始GAN基本一样，生成器损失受感知损失（Perceptual Loss）$l^{SR}$的启发，由两部分组成，即内容损失（Content Loss）和对抗损失（Adversarial Loss）：<br>$$l^{SR}=l_{VGG}^{SR}+10^{-3}l^{SR}_{Gen}$$</p><h2 id="内容损失"><a href="#内容损失" class="headerlink" title="内容损失"></a>内容损失</h2><p>常用的MSE损失函数导致图像缺少高频信息，文章使用VGG损失函数，将生成的HR图像和真实的HR图像送入VGG19网络中的第i个最大池化层前的第j个卷积层之前的网络进行特征提取，然后在提取的特征图上再使用MSE误差：</p><p>$$ l_ {VGG/i.j}^ {SR} = \frac{1}{W_ {i,j}H_ {i,j}} \sum_ {x=1}^{W_ {i,j}} \sum_ {y=1}^{H_ {i,j}} ( \phi_ {i,j} ( I^{HR}_ {x,y} ) - \phi_ {i,j}  ( G_ {\theta_ G} ( I^{HR}_ {x, y} ) ) ) ^2 $$</p><p>例如：SRGAN-VGG54代表使用的损失函数为$l_{VGG/5.4}^{SR}$。假定$\phi_{5,4}$是指第五个最大池化前的第四个卷积层之前的网络，即VGG19前16层的网络，其输出用$\phi_{5,4}$(input）表示，输出特征图大小为$W_{i,j} \times H_{i,j} \times C_{i,j}$。</p><h2 id="对抗损失"><a href="#对抗损失" class="headerlink" title="对抗损失"></a>对抗损失</h2><p>与普通GAN的生成器损失基本一样，其中$D_{\theta_D} (G_{\theta_G}(I^{LR}))$代表生成图像判别为真的概率：<br>$$l_{Gen}^{SR} = \sum_{n=1} ^N - \log D_{\theta_D} (G_{\theta_G}(I^{LR}))$$</p><h1 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h1><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><ol><li>在训练阶段，将HR图像使用bicubic kernel进行下采样和高斯模糊生成LR图片，假设下采样率为r。低分辨率图像大小为$W \times H \times C$，则高分辨率图像为$rW \times rH \times C$。实验中取r为4；</li><li>在ImageNet数据集中随机选取350张图片进行训练，随机裁剪96×96的图片作为HR图片，对应的LR图片大小为24×24；</li><li>使用Adam优化器，$\beta_1$为0.9：<ul><li>SRResNet以10<sup>-4</sup>的学习率进行10<sup>6</sup>次迭代，且使用基于MSE的SRResNet网络进行过预训练</li><li>SRGAN先以10<sup>-4</sup>的学习率进行10<sup>5</sup>次迭代，再以10<sup>-5</sup>的学习率进行另外10<sup>5</sup>次迭代</li></ul></li></ol><h2 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h2><ol><li><strong>PSNR</strong>和<strong>SSIM</strong>，使用daala包，在中心裁剪的y通道上计算，并且去除4像素的边界；</li><li>提出了一个新的评价标准<strong>平均意见分数（MOS）</strong>：<br>由26个评分人对超分辨率图像进行打分，分数由1（最差质量）-5（最好质量），打分的图片是数据集Set5、Set14和BSD100中原始的HR图像以及对应的LR图像通过以下方法得到的SR图像（带*的方法没使用BSD100数据集）：最邻近插值（NN）、双二次插值（bicubic）、SRCNN、SelfExSR、DRCN、ESPCN、SRResNet-MSE、SRResNet-VGG22*、SRGAN-MSE*、SRGAN-VGG22*、SRGAN-VGG54。因此，每个评分人分别对1128个实例进行了评估，并在来自 BSD300训练集的20张图像的NN（得分 1）和HR（得分5）图像上进行了校准。<br><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h414n8qtrpj30gk075dh3.jpg" alt="image.png" title="BSD100中图片的打分情况，红色为平均值"></li></ol><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><h2 id="感知损失对比"><a href="#感知损失对比" class="headerlink" title="感知损失对比"></a>感知损失对比</h2><p>使用不同的感知损失在Set5和Set14两个数据集上进行测试：<br><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h414nno6nnj30fr088abd.jpg" alt="image.png" title="感知损失对比实验结果（1）"><br><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h414nyibraj30q10c2gxa.jpg" alt="image.png" title="感知损失对比实验结果（2）"></p><ol><li>MSE相对于感知损失具有更高的PSNR和SSIM值，但结果过于平滑，MOS更能反应出真实感觉；</li><li>在Set5上MSE与感知损失差距不大，但在Set14上感知损失的效果明显；</li><li>从图中可以看出，使用VGG更深的网络可以得到更多的纹理细节。</li></ol><h2 id="网络方法对比"><a href="#网络方法对比" class="headerlink" title="网络方法对比"></a>网络方法对比</h2><p>使用SRResNet和SRGAN与其他6种方法进行对比：<br><img src="http://tva1.sinaimg.cn/large/008cqtC1ly1h414obnek7j30pr0a1acy.jpg" alt="image.png" title="方法对比结果"></p><ol><li>SRResNet在PSNR和SSIM上均取得了更好的结果；</li><li>SRGAN具有卓越的感知性能。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文的创新点在于：</p><ol><li>提出了SRResNet作为生成器的主干网络；</li><li>提出了SRGAN，引入了感知损失以及判别器来提高图片的真实感觉；</li><li>提出了主观的评价标准MOS。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 文献阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 超分辨率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
